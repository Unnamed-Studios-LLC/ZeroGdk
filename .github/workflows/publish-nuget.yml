name: Build, Test, Pack & Publish ZeroGdk Libraries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Solution
        run: dotnet build --configuration Release --no-restore

      - name: Run Tests
        run: dotnet test --configuration Release --no-build

  pack_and_publish:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        project:
          - src/ZeroGdk.Client/ZeroGdk.Client.csproj
          - src/ZeroGdk.Server/ZeroGdk.Server.csproj
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Restore Dependencies
        run: dotnet restore ${{ matrix.project }}

      - name: Build Project
        run: dotnet build ${{ matrix.project }} --configuration Release --no-restore

      - name: Compute Package Version
        id: compute_version
        run: |
          # Extract VersionPrefix from the project file (expects format major.minor, e.g., 1.2)
          VERSION_PREFIX=$(grep '<VersionPrefix>' ${{ matrix.project }} | sed -E 's/.*>([0-9]+\.[0-9]+)<.*/\1/')
          PATCH=${GITHUB_RUN_NUMBER}
          VERSION="${VERSION_PREFIX}.${PATCH}"
          echo "Computed version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Pack Project
        run: dotnet pack ${{ matrix.project }} --configuration Release --no-build /p:PackageVersion=${{ steps.compute_version.outputs.version }} -o ./nupkg

      - name: Publish Package to NuGet
        run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
